/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

plugins {
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyManagement}"
    // https://github.com/springdoc/springdoc-openapi-gradle-plugin
    id "com.github.johnrengelman.processes" version "0.5.0"
    id "org.springdoc.openapi-gradle-plugin" version "1.3.3"
    id 'java'
    id 'application'
}

group 'fr.dademo.supervision.service'
archivesBaseName = 'dademo-supervision-service'
version '1.0.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

application {
    mainClass.set("fr.dademo.supervision.service.Application")
}

dependencies {

    implementation project(':modules:dependencies:tools:generic_tools')
    implementation project(':modules:supervision:dependencies:data_model')
    implementation project(':modules:supervision:dependencies:repositories')

    runtimeOnly project(':modules:supervision:dependencies:backends:postgresql')

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}"

    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation "org.zalando:problem-spring-web:${problemSpringWebVersion}"
    implementation "org.mapstruct:mapstruct:${mapStructVersion}"
    runtimeOnly "org.postgresql:postgresql:${postgresqlVersion}"

    // springdoc
    implementation "org.springdoc:springdoc-openapi-ui:${springdocVersion}"
    implementation "org.springdoc:springdoc-openapi-javadoc:${springdocVersion}"
    implementation "org.springdoc:springdoc-openapi-webflux-ui:${springdocVersion}"
    implementation "org.springdoc:springdoc-openapi-hateoas:${springdocVersion}"
    implementation "org.springdoc:springdoc-openapi-data-rest:${springdocVersion}"

    runtimeOnly "org.postgresql:postgresql:${postgresqlVersion}"

    // Other libraries
    implementation "jakarta.validation:jakarta.validation-api:${jakartaValidationApiVersion}"
    implementation "com.google.code.findbugs:jsr305:${findBugsJsr305Version}"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
}

openApi {
    outputDir.set(file("$buildDir/docs"))
    outputFileName.set("openapi.json")
}

dependencyManagement {
    imports {
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
    }
}

